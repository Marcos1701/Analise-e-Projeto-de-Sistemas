// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Projetinho.Models;

#nullable disable

namespace Projetinho.Migrations
{
    [DbContext(typeof(MyDbContext))]
    [Migration("20231109010644_InitialCreate")]
    partial class InitialCreate
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("Projetinho.Models.Alert", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("BookName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int?>("Fine")
                        .HasColumnType("int");

                    b.Property<DateTime>("IssueDate")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("LibraianId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ReturnDate")
                        .IsRequired()
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.HasIndex("LibraianId");

                    b.ToTable("Alert");
                });

            modelBuilder.Entity("Projetinho.Models.Books", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Authorname")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("varchar(30)");

                    b.Property<string>("Bookname")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("Bookquantity")
                        .HasColumnType("int");

                    b.Property<int>("CatalogId")
                        .HasColumnType("int");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("LibraianId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CatalogId");

                    b.HasIndex("LibraianId");

                    b.ToTable("Books");

                    b.HasDiscriminator<string>("Discriminator").HasValue("Books");
                });

            modelBuilder.Entity("Projetinho.Models.Catalog", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Authorname")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("varchar(30)");

                    b.Property<int?>("Quantitycopies")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Catalogs");
                });

            modelBuilder.Entity("Projetinho.Models.Libraian", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("Mobileno")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("varchar(30)");

                    b.HasKey("Id");

                    b.ToTable("Libraians");
                });

            modelBuilder.Entity("Projetinho.Models.LibraianMember", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("LibraianId")
                        .HasColumnType("int");

                    b.Property<int>("MemberId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("LibraianId");

                    b.HasIndex("MemberId");

                    b.ToTable("LibraianMembers");
                });

            modelBuilder.Entity("Projetinho.Models.Member", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Address")
                        .HasColumnType("longtext");

                    b.Property<int>("Contact")
                        .HasColumnType("int");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("varchar(30)");

                    b.HasKey("Id");

                    b.ToTable("Members");

                    b.HasDiscriminator<string>("Discriminator").HasValue("Member");
                });

            modelBuilder.Entity("Projetinho.Models.FacultyMember", b =>
                {
                    b.HasBaseType("Projetinho.Models.Member");

                    b.Property<string>("Facultycoll")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int?>("LibraianId")
                        .HasColumnType("int");

                    b.HasIndex("LibraianId");

                    b.HasDiscriminator().HasValue("FacultyMember");
                });

            modelBuilder.Entity("Projetinho.Models.GeneralBook", b =>
                {
                    b.HasBaseType("Projetinho.Models.Books");

                    b.Property<int?>("MemberId")
                        .HasColumnType("int");

                    b.HasIndex("MemberId");

                    b.HasDiscriminator().HasValue("GeneralBook");
                });

            modelBuilder.Entity("Projetinho.Models.ReferenceBook", b =>
                {
                    b.HasBaseType("Projetinho.Models.Books");

                    b.HasDiscriminator().HasValue("ReferenceBook");
                });

            modelBuilder.Entity("Projetinho.Models.Student", b =>
                {
                    b.HasBaseType("Projetinho.Models.Member");

                    b.Property<int?>("LibraianId")
                        .HasColumnType("int")
                        .HasColumnName("Student_LibraianId");

                    b.Property<string>("Studentcoll")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasIndex("LibraianId");

                    b.HasDiscriminator().HasValue("Student");
                });

            modelBuilder.Entity("Projetinho.Models.Alert", b =>
                {
                    b.HasOne("Projetinho.Models.Libraian", "Libraian")
                        .WithMany("Alerts")
                        .HasForeignKey("LibraianId");

                    b.Navigation("Libraian");
                });

            modelBuilder.Entity("Projetinho.Models.Books", b =>
                {
                    b.HasOne("Projetinho.Models.Catalog", "Catalog")
                        .WithMany("Books")
                        .HasForeignKey("CatalogId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Projetinho.Models.Libraian", "Libraian")
                        .WithMany("Books")
                        .HasForeignKey("LibraianId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Catalog");

                    b.Navigation("Libraian");
                });

            modelBuilder.Entity("Projetinho.Models.LibraianMember", b =>
                {
                    b.HasOne("Projetinho.Models.Libraian", "Libraian")
                        .WithMany()
                        .HasForeignKey("LibraianId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Projetinho.Models.Member", "Member")
                        .WithMany()
                        .HasForeignKey("MemberId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Libraian");

                    b.Navigation("Member");
                });

            modelBuilder.Entity("Projetinho.Models.FacultyMember", b =>
                {
                    b.HasOne("Projetinho.Models.Libraian", "Libraian")
                        .WithMany()
                        .HasForeignKey("LibraianId");

                    b.Navigation("Libraian");
                });

            modelBuilder.Entity("Projetinho.Models.GeneralBook", b =>
                {
                    b.HasOne("Projetinho.Models.Member", "Member")
                        .WithMany("GeneralBooks")
                        .HasForeignKey("MemberId");

                    b.Navigation("Member");
                });

            modelBuilder.Entity("Projetinho.Models.Student", b =>
                {
                    b.HasOne("Projetinho.Models.Libraian", "Libraian")
                        .WithMany()
                        .HasForeignKey("LibraianId");

                    b.Navigation("Libraian");
                });

            modelBuilder.Entity("Projetinho.Models.Catalog", b =>
                {
                    b.Navigation("Books");
                });

            modelBuilder.Entity("Projetinho.Models.Libraian", b =>
                {
                    b.Navigation("Alerts");

                    b.Navigation("Books");
                });

            modelBuilder.Entity("Projetinho.Models.Member", b =>
                {
                    b.Navigation("GeneralBooks");
                });
#pragma warning restore 612, 618
        }
    }
}
